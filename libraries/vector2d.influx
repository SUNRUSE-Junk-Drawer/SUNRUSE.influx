# Calls "add" between the pairs' "a"s and "b"s, returning the results in a 
# new pair.
add
	output
		a input intersperse a add
		b input intersperse b add
		
assert
	temp
		a
			a 3
			b 5
		b
			a 7
			b 4
	expect
		a 10
		b temp add a
	output expect equal
	
assert
	temp
		a
			a 3
			b 5
		b
			a 7
			b 4
	expect
		a 9
		b temp add b
	output expect equal	
		
# Calls "subtact" between the pairs' "a"s and "b"s, returning the results in a 
# new pair.
subtract
	output
		a input intersperse a subtract
		b input intersperse b subtract		
		
assert
	temp
		a
			a 3
			b 5
		b
			a 7
			b 4
	expect
		a -4
		b temp subtract a
	output expect equal
	
assert
	temp
		a
			a 3
			b 5
		b
			a 7
			b 4
	expect
		a 1
		b temp subtract b
	output expect equal	
	
# Calls "multiply" between the pairs' "a"s and "b"s, returning the results in a 
# new pair.
multiply
	output
		a input intersperse a multiply
		b input intersperse b multiply
		
assert
	temp
		a
			a 3
			b 5
		b
			a 7
			b 4
	expect
		a 21
		b temp multiply a
	output expect equal
	
assert
	temp
		a
			a 3
			b 5
		b
			a 7
			b 4
	expect
		a 20
		b temp multiply b
	output expect equal	
	
# Calls "divide" between the pairs' "a"s and "b"s, returning the results in a 
# new pair.	
divide
	output
		a input intersperse a divide
		b input intersperse b divide	
		
assert
	temp
		a
			a 30
			b 40
		b
			a 6
			b 4
	expect
		a 5
		b temp divide a
	output expect equal
	
assert
	temp
		a
			a 30
			b 40
		b
			a 7
			b 4
	expect
		a 10
		b temp divide b
	output expect equal	
	
# Calculates the square of the magnitude of a pair representing a 2D vector.
# Faster than "magnitude".
magnitudeSquared
	output input split multiply add
	
assert
	temp
		a 3
		b 5
	expect
		a 34
		b temp magnitudeSquared
	output expect equal
	
# Calculates the square of the distance between a pair of pairs representing 2D 
# vectors.  Faster than "distance".
distanceSquared
	output input subtract magnitudeSquared
	
assert
	temp
		a
			a 3
			b 5
		b
			a 12
			b 1
	expect
		a 97
		b temp distanceSquared
	output expect equal
	
# Calculates the dot product of a pair of pairs representing 2D vectors.
dot
	output input multiply add
	
assert
	temp
		a
			a 4
			b 7
		b
			a 5
			b 9
	expect
		a 83
		b temp dot
	output expect equal

# Turns a pair representing a 2D vector 90 degrees counter-clockwise.
counterClockwise
	output
		a input b negate
		b input a
		
assert
	temp
		a 3
		b 5
	expect
		a -5
		b temp counterClockwise a
	output expect equal

assert
	temp
		a 3
		b 5
	expect
		a 3
		b temp counterClockwise b
	output expect equal

# Turns a pair representing a 2D vector 90 degrees clockwise.
clockwise
	output
		a input b
		b input a negate
		
assert
	temp
		a 3
		b 5
	expect
		a 5
		b temp clockwise a
	output expect equal

assert
	temp
		a 3
		b 5
	expect
		a -3
		b temp clockwise b
	output expect equal